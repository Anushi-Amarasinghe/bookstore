sqlite3 projectDB.db


DROP TABLE IF EXISTS Users;
DROP TABLE IF EXISTS Books;
DROP TABLE IF EXISTS ShoppingCart;
DROP TABLE IF EXISTS CartItems;
DROP TABLE IF EXISTS PaymentMethods;
DROP TABLE IF EXISTS ShippingAddresses;
DROP TABLE IF EXISTS Orders;
DROP TABLE IF EXISTS OrderItems;
DROP TABLE IF EXISTS UserMessages;
DROP TABLE IF EXISTS Bestsellers;


.tables


node createDB.js


-- Users Table
CREATE TABLE IF NOT EXISTS Users (
    user_id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT NOT NULL,
    password_hash TEXT NOT NULL,
    email TEXT NOT NULL,
    first_name TEXT,
    last_name TEXT,
    phone_number TEXT,
    type TEXT DEFAULT 'customer',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Books Table
CREATE TABLE IF NOT EXISTS Books (
    book_id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    author TEXT,
    publisher TEXT,
    genre TEXT,
    subGenre TEXT,
    publication_date DATE,
    ISBN TEXT UNIQUE,
    price REAL NOT NULL,
    stock_quantity INTEGER DEFAULT 0,
    description TEXT,
    cover_image_url TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ShoppingCart Table
CREATE TABLE IF NOT EXISTS ShoppingCart (
    cart_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

-- CartItems Table
CREATE TABLE IF NOT EXISTS CartItems (
    cart_item_id INTEGER PRIMARY KEY AUTOINCREMENT,
    cart_id INTEGER NOT NULL,
    book_id INTEGER NOT NULL,
    quantity INTEGER DEFAULT 1,
    FOREIGN KEY (cart_id) REFERENCES ShoppingCart(cart_id),
    FOREIGN KEY (book_id) REFERENCES Books(book_id)
);

-- PaymentMethods Table
CREATE TABLE IF NOT EXISTS PaymentMethods (
    payment_id INTEGER PRIMARY KEY AUTOINCREMENT,
    payment_method TEXT NOT NULL,
    card_number TEXT,
    card_expiry_date TEXT,
    card_holder_name TEXT,
    CVC TEXT
);

-- ShippingAddresses Table
CREATE TABLE IF NOT EXISTS ShippingAddresses (
    address_id INTEGER PRIMARY KEY AUTOINCREMENT,
    order_id INTEGER NOT NULL,
    address_line1 TEXT NOT NULL,
    city TEXT NOT NULL,
    state TEXT NOT NULL,
    postal_code TEXT NOT NULL,
    country TEXT NOT NULL,
    phone_number TEXT,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id)
);

-- Orders Table
CREATE TABLE IF NOT EXISTS Orders (
    order_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status TEXT NOT NULL,
    total_amount REAL NOT NULL,
    payment_id INTEGER NULL,
    shipping_id INTEGER NULL,
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (payment_id) REFERENCES PaymentMethods(payment_id),
    FOREIGN KEY (shipping_id) REFERENCES ShippingAddresses(address_id)
);

-- OrderItems Table
CREATE TABLE IF NOT EXISTS OrderItems (
    order_item_id INTEGER PRIMARY KEY AUTOINCREMENT,
    order_id INTEGER NOT NULL,
    book_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    price REAL NOT NULL,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (book_id) REFERENCES Books(book_id)
);

-- UserMessages Table
CREATE TABLE IF NOT EXISTS UserMessages (
    message_id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    email TEXT NOT NULL,
    message TEXT NOT NULL,
    submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Bestsellers Table
CREATE TABLE IF NOT EXISTS Bestsellers (
    bestseller_id INTEGER PRIMARY KEY AUTOINCREMENT,
    book_id INTEGER NOT NULL,
    FOREIGN KEY (book_id) REFERENCES Books(book_id)
);


.tables


.exit
